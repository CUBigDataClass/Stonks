version: "3.5"

services:
  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    ports:
      - '2181:2181'
    networks:
      - kafka_network
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: unless-stopped

  kafka-1:
    image: 'wurstmeister/kafka:latest'
    container_name: kafka-1
    ports:
      - '29092:29092'
      - '29093:29093'
    networks:
      - kafka_network
    depends_on:
      - zookeeper 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092, EXTERNAL_DIFFERENT_HOST://:29093, INTERNAL://:9092
      #PLAINTEXT: unencrypted data  
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092, EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL_SAME_HOST:PLAINTEXT, EXTERNAL_DIFFERENT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #- KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      #ALLOW_PLAINTEXT_LISTENER=yes
    restart: unless-stopped

  tweets:
    container_name: tweets
    build: 
      context: .
      dockerfile: tweets
    networks:
      - kafka_network
    depends_on:
      - kafka-1
    entrypoint: 
      - bash 
      - -c 
      - |
        echo 'Giving Kafka a bit of time to start upâ€¦'
        sleep 30
        # Run the client code 
        python3 consumer.py & python3 tstream.py
    restart: unless-stopped

  news:
    container_name: news
    build:
      context: .
      dockerfile: Dockerfile_news
    entrypoint:
      - bash
      - -c
      - |
        # Run the client code 
        cron && tail -f /var/log/cron.log
    restart: unless-stopped

networks:
    kafka_network:
      name: kafka_network
    
  
